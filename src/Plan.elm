module Plan exposing (Plan, decode)

import Debug
import Dict exposing (Dict)
import Yaml.Decode as YamlDecode exposing (Error(..))


example : String
example =
    """
description: Workout generated by ChatGPT
author: 
  name: Nicolas Boisvert

planning:
  precount: 5
  days: 
    monday:
      rounds: 5
      steps:
        - name: Countdown
          type: break
          seconds: 5

        - name: Burpees
          seconds: 40

        - type: break
          name: break
          seconds: 20

        - type: normal
          name: Jump squat
          seconds: 40

        - type: break
          name: break
          seconds: 20

        - type: normal
          name: Mountain climbers
          seconds: 40

        - type: break
          name: break
          seconds: 20

        - type: normal
          name: Fast push-ups
          seconds: 40

        - type: break
          name: break
          seconds: 20

        - type: break
          name: Cooldown
          seconds: 60
"""


type Day
    = Monday
    | Tuesday
    | Wednesday
    | Thursday
    | Friday
    | Saturday
    | Sunday


dayFromString : String -> Maybe Day
dayFromString string =
    case string of
        "monday" ->
            Just Monday

        "tuesday" ->
            Just Tuesday

        "wednesday" ->
            Just Wednesday

        "thursday" ->
            Just Thursday

        "friday" ->
            Just Friday

        "saturday" ->
            Just Saturday

        "sunday" ->
            Just Sunday

        _ ->
            Nothing


type alias Author =
    { name : String
    , email : Maybe String
    }


type alias EffortWorkoutSpec =
    { name : String, seconds : Int }


type alias BreakWorkoutSpec =
    { name : Maybe String, seconds : Int }


type Step
    = Break BreakWorkoutSpec
    | Effort EffortWorkoutSpec


type alias DailyPlanning =
    { monday : Maybe DaysMap
    , tuesday : Maybe DaysMap
    , wednesday : Maybe DaysMap
    , thursday : Maybe DaysMap
    , friday : Maybe DaysMap
    , saturday : Maybe DaysMap
    , sunday : Maybe DaysMap
    }


type alias DaysMap =
    { rounds : Int
    , steps : List Step
    }


type alias Planning =
    { precount : Int
    , days : DailyPlanning
    }


type alias Plan =
    { description : String
    , author : Author
    , planning : Planning
    }


newDailyPlanning : DailyPlanning
newDailyPlanning =
    { monday = Nothing
    , tuesday = Nothing
    , wednesday = Nothing
    , thursday = Nothing
    , friday = Nothing
    , saturday = Nothing
    , sunday = Nothing
    }


putWorkout : Day -> Maybe DaysMap -> DailyPlanning -> DailyPlanning
putWorkout day workout dailyPlanning =
    case day of
        Monday ->
            { dailyPlanning | monday = workout }

        Tuesday ->
            { dailyPlanning | tuesday = workout }

        Wednesday ->
            { dailyPlanning | wednesday = workout }

        Thursday ->
            { dailyPlanning | thursday = workout }

        Friday ->
            { dailyPlanning | friday = workout }

        Saturday ->
            { dailyPlanning | saturday = workout }

        Sunday ->
            { dailyPlanning | sunday = workout }


convertDaysMap : Dict String DaysMap -> DailyPlanning
convertDaysMap inputDict =
    let
        folder key value acc =
            case dayFromString key of
                Just day ->
                    putWorkout day (Just value) acc

                Nothing ->
                    acc
    in
    Dict.foldl folder newDailyPlanning (Debug.log "Dict" inputDict)


decoder : YamlDecode.Decoder Plan
decoder =
    let
        authorDecoder =
            YamlDecode.map2 Author
                (YamlDecode.field "name" YamlDecode.string)
                (YamlDecode.maybe (YamlDecode.field "email" YamlDecode.string))

        breakWorkoutDecoder =
            YamlDecode.map2 BreakWorkoutSpec
                (YamlDecode.field "name" (YamlDecode.maybe YamlDecode.string))
                (YamlDecode.field "seconds" YamlDecode.int)

        effortWorkoutDecoder =
            YamlDecode.map2 EffortWorkoutSpec
                (YamlDecode.field "name" YamlDecode.string)
                (YamlDecode.field "seconds" YamlDecode.int)

        stepConverter decodedType =
            case decodedType |> Debug.log "Type" of
                Just "break" ->
                    YamlDecode.map Break breakWorkoutDecoder

                _ ->
                    YamlDecode.map Effort effortWorkoutDecoder

        stepDecoder =
            YamlDecode.maybe (YamlDecode.field "type" YamlDecode.string)
                |> YamlDecode.andThen stepConverter

        dailyPlanningDecoder =
            YamlDecode.map2 DaysMap
                (YamlDecode.field "rounds" YamlDecode.int)
                (YamlDecode.field "steps" (YamlDecode.list stepDecoder))

        daysDecoder =
            YamlDecode.dict dailyPlanningDecoder
                |> YamlDecode.map convertDaysMap

        planningDecoder =
            YamlDecode.map2 Planning
                (YamlDecode.field "precount" YamlDecode.int)
                (YamlDecode.field "days" daysDecoder)
    in
    YamlDecode.map3 Plan
        (YamlDecode.field "description" YamlDecode.string)
        (YamlDecode.field "author" authorDecoder)
        (YamlDecode.field "planning" planningDecoder)


decode : String -> Result String Plan
decode input =
    case YamlDecode.fromString decoder input of
        Ok plan ->
            Ok plan

        Err (Parsing string) ->
            Err string

        Err (Decoding string) ->
            Err string
